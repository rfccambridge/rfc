//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using pxcommander = Robotics.Commander.Proxy;
using reflection = System.Reflection;


namespace Robotics.Commander.Proxy
{
    
    /// <summary>
    /// Commander Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        /// The Unique Contract Identifier for the Commander service
        public const String Identifier = "http://schemas.tempuri.org/2006/08/Commander.html";
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            List<contractmodel.ServiceSummary> services = null;
            io.Stream stream = null;
            try
            {
                string Resource = @"Robotics.Commander.Resources.DssModel.dss";
                stream = reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(Resource);
                compression.GZipStream compressionStream = new compression.GZipStream(stream, compression.CompressionMode.Decompress, true);
                XmlSerializer serializer = new XmlSerializer(typeof(List<contractmodel.ServiceSummary>));
                services = (List<contractmodel.ServiceSummary>)serializer.Deserialize(compressionStream);
                compressionStream.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error retrieving Dss Service Model: ", ex.Message);
            }
            finally
            {
                if (stream != null)
                {
                    stream.Close();
                    stream = null;
                }
            }
            return services;

        }
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    /// <summary>
    /// Commander State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("CommanderState", Namespace="http://schemas.tempuri.org/2006/08/Commander.html")]
    public class CommanderState : System.ICloneable
    {
        private Boolean _log;
        private String _logFile;
        /// <summary>
        /// Log
        /// </summary>
        [DataMember()]
        public Boolean Log
        {
            get
            {
                return this._log;
            }
            set
            {
                this._log = value;
            }
        }
        /// <summary>
        /// Log File
        /// </summary>
        [DataMember()]
        public String LogFile
        {
            get
            {
                return this._logFile;
            }
            set
            {
                this._logFile = value;
            }
        }
        public void CopyTo(CommanderState target)
        {
            target.Log = this.Log;
            target.LogFile = this.LogFile;
        }
        public virtual object Clone()
        {
            CommanderState target = new CommanderState();

            target.Log = this.Log;
            target.LogFile = this.LogFile;
            return target;

        }
    }
    /// <summary>
    /// Move Request
    /// </summary>
    [DataContract()]
    [DataMemberConstructor()]
    [XmlRootAttribute("MoveRequest", Namespace="http://schemas.tempuri.org/2006/08/Commander.html")]
    public class MoveRequest : System.ICloneable
    {
        private Int32 _iD;
        private Int32 _leftFront;
        private Int32 _rightFront;
        private Int32 _leftBack;
        private Int32 _rightBack;
        /// <summary>
        /// Default Constructor
        /// </summary>
        public MoveRequest()
        {
        }
        /// <summary>
        /// Data Member Initialization Constructor
        /// </summary>
        public MoveRequest(int iD, int leftFront, int rightFront, int leftBack, int rightBack)
        {
            this._iD = iD;
            this._leftFront = leftFront;
            this._rightFront = rightFront;
            this._leftBack = leftBack;
            this._rightBack = rightBack;
        }
        /// <summary>
        /// ID
        /// </summary>
        [DataMember()]
        public Int32 ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                this._iD = value;
            }
        }
        /// <summary>
        /// Left Front
        /// </summary>
        [DataMember()]
        public Int32 LeftFront
        {
            get
            {
                return this._leftFront;
            }
            set
            {
                this._leftFront = value;
            }
        }
        /// <summary>
        /// Right Front
        /// </summary>
        [DataMember()]
        public Int32 RightFront
        {
            get
            {
                return this._rightFront;
            }
            set
            {
                this._rightFront = value;
            }
        }
        /// <summary>
        /// Left Back
        /// </summary>
        [DataMember()]
        public Int32 LeftBack
        {
            get
            {
                return this._leftBack;
            }
            set
            {
                this._leftBack = value;
            }
        }
        /// <summary>
        /// Right Back
        /// </summary>
        [DataMember()]
        public Int32 RightBack
        {
            get
            {
                return this._rightBack;
            }
            set
            {
                this._rightBack = value;
            }
        }
        public void CopyTo(MoveRequest target)
        {
            target.ID = this.ID;
            target.LeftFront = this.LeftFront;
            target.RightFront = this.RightFront;
            target.LeftBack = this.LeftBack;
            target.RightBack = this.RightBack;
        }
        public virtual object Clone()
        {
            MoveRequest target = new MoveRequest();

            target.ID = this.ID;
            target.LeftFront = this.LeftFront;
            target.RightFront = this.RightFront;
            target.LeftBack = this.LeftBack;
            target.RightBack = this.RightBack;
            return target;

        }
    }
    /// <summary>
    /// KickID
    /// </summary>
    [DataContract()]
    [DataMemberConstructor()]
    [XmlRootAttribute("KickID", Namespace="http://schemas.tempuri.org/2006/08/Commander.html")]
    public class KickID : System.ICloneable
    {
        private Int32 _iD;
        /// <summary>
        /// Default Constructor
        /// </summary>
        public KickID()
        {
        }
        /// <summary>
        /// Data Member Initialization Constructor
        /// </summary>
        public KickID(int iD)
        {
            this._iD = iD;
        }
        /// <summary>
        /// ID
        /// </summary>
        [DataMember()]
        public Int32 ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                this._iD = value;
            }
        }
        public void CopyTo(KickID target)
        {
            target.ID = this.ID;
        }
        public virtual object Clone()
        {
            KickID target = new KickID();

            target.ID = this.ID;
            return target;

        }
    }
    /// <summary>
    /// Commander Operations
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class CommanderOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Replace, MoveCommand, KickCommand, ChargeCommand, StopChargeCommand>
    {
        // Post DsspDefaultLookup and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultLookup and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultDrop and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultDrop and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Get and return the response port.
        public virtual PortSet<CommanderState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Get and return the response port.
        public virtual PortSet<CommanderState,Fault> Get()
        {
            Get op = new Get();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Replace and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> Replace(CommanderState body)
        {
            Replace op = new Replace();
            op.Body = body ?? new CommanderState();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post MoveCommand and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> MoveCommand(MoveRequest body)
        {
            MoveCommand op = new MoveCommand();
            op.Body = body ?? new MoveRequest();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post KickCommand and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> KickCommand(KickID body)
        {
            KickCommand op = new KickCommand();
            op.Body = body ?? new KickID();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post ChargeCommand and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> ChargeCommand(KickID body)
        {
            ChargeCommand op = new ChargeCommand();
            op.Body = body ?? new KickID();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post StopChargeCommand and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> StopChargeCommand(KickID body)
        {
            StopChargeCommand op = new StopChargeCommand();
            op.Body = body ?? new KickID();
            this.Post(op);
            return op.ResponsePort;

        }
    }
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<CommanderState, Fault>>
    {
        public Get()
        {
        }
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<CommanderState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Replace
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : Microsoft.Dss.ServiceModel.Dssp.Replace<CommanderState, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, Fault>>
    {
        public Replace()
        {
        }
        public Replace(CommanderState body) : 
                base(body)
        {
        }
        public Replace(CommanderState body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Move Command
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class MoveCommand : Microsoft.Dss.ServiceModel.Dssp.Update<MoveRequest, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, Fault>>
    {
        public MoveCommand()
        {
        }
        public MoveCommand(MoveRequest body) : 
                base(body)
        {
        }
        public MoveCommand(MoveRequest body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Kick Command
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class KickCommand : Microsoft.Dss.ServiceModel.Dssp.Update<KickID, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, Fault>>
    {
        public KickCommand()
        {
        }
        public KickCommand(KickID body) : 
                base(body)
        {
        }
        public KickCommand(KickID body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Charge Command
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class ChargeCommand : Microsoft.Dss.ServiceModel.Dssp.Update<KickID, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, Fault>>
    {
        public ChargeCommand()
        {
        }
        public ChargeCommand(KickID body) : 
                base(body)
        {
        }
        public ChargeCommand(KickID body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Stop Charge Command
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class StopChargeCommand : Microsoft.Dss.ServiceModel.Dssp.Update<KickID, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, Fault>>
    {
        public StopChargeCommand()
        {
        }
        public StopChargeCommand(KickID body) : 
                base(body)
        {
        }
        public StopChargeCommand(KickID body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
