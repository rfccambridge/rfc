//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using reflection = System.Reflection;
using vision = Vision.Proxy;


namespace Vision.Proxy
{
    
    /// <summary>
    /// Vision Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        /// The Unique Contract Identifier for the Vision service
        public const String Identifier = "http://schemas.tempuri.org/2007/02/VisionService.html";
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            List<contractmodel.ServiceSummary> services = null;
            io.Stream stream = null;
            try
            {
                string Resource = @"Vision.Resources.DssModel.dss";
                stream = reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(Resource);
                compression.GZipStream compressionStream = new compression.GZipStream(stream, compression.CompressionMode.Decompress, true);
                XmlSerializer serializer = new XmlSerializer(typeof(List<contractmodel.ServiceSummary>));
                services = (List<contractmodel.ServiceSummary>)serializer.Deserialize(compressionStream);
                compressionStream.Close();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error retrieving Dss Service Model: ", ex.Message);
            }
            finally
            {
                if (stream != null)
                {
                    stream.Close();
                    stream = null;
                }
            }
            return services;

        }
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    /// <summary>
    /// Vision Service State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("VisionServiceState", Namespace="http://schemas.tempuri.org/2007/02/VisionService.html")]
    public class VisionServiceState : System.ICloneable
    {
        public void CopyTo(VisionServiceState target)
        {
        }
        public virtual object Clone()
        {
            // For a class without fields, cloning isn't necessary
            return this;

        }
    }
    /// <summary>
    /// Delete Subscription Type
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("DeleteSubscriptionType", Namespace="http://schemas.tempuri.org/2007/02/VisionService.html")]
    public class DeleteSubscriptionType : System.ICloneable
    {
        private String _subscriber;
        /// <summary>
        /// Subscriber
        /// </summary>
        [DataMember()]
        public String Subscriber
        {
            get
            {
                return this._subscriber;
            }
            set
            {
                this._subscriber = value;
            }
        }
        public void CopyTo(DeleteSubscriptionType target)
        {
            target.Subscriber = this.Subscriber;
        }
        public virtual object Clone()
        {
            DeleteSubscriptionType target = new DeleteSubscriptionType();

            target.Subscriber = this.Subscriber;
            return target;

        }
    }
    /// <summary>
    /// Game Objects
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("GameObjects", Namespace="http://schemas.tempuri.org/2007/02/VisionService.html")]
    public class GameObjects : System.ICloneable
    {
        private List<Robot> _ourRobots;
        private List<Robot> _theirRobots;
        private Ball _ball;
        private Int32 _totalObjects;
        private String _source;
        /// <summary>
        /// Our Robots
        /// </summary>
        [DataMember()]
        public List<Robot> OurRobots
        {
            get
            {
                return this._ourRobots;
            }
            set
            {
                this._ourRobots = value;
            }
        }
        /// <summary>
        /// Their Robots
        /// </summary>
        [DataMember()]
        public List<Robot> TheirRobots
        {
            get
            {
                return this._theirRobots;
            }
            set
            {
                this._theirRobots = value;
            }
        }
        /// <summary>
        /// Ball
        /// </summary>
        [DataMember()]
        public Ball Ball
        {
            get
            {
                return this._ball;
            }
            set
            {
                this._ball = value;
            }
        }
        /// <summary>
        /// Total Objects
        /// </summary>
        [DataMember()]
        public Int32 TotalObjects
        {
            get
            {
                return this._totalObjects;
            }
            set
            {
                this._totalObjects = value;
            }
        }
        /// <summary>
        /// Source
        /// </summary>
        [DataMember()]
        public String Source
        {
            get
            {
                return this._source;
            }
            set
            {
                this._source = value;
            }
        }
        public void CopyTo(GameObjects target)
        {

            // copy IEnumerable System.Collections.Generic.List<Robot> OurRobots
            if (this.OurRobots != null)
            {
                target.OurRobots = new System.Collections.Generic.List<Robot>();
                foreach(Robot elem in OurRobots)
                {
                    target.OurRobots.Add((elem == null) ? null : (Robot)((System.ICloneable)elem).Clone());
                }
            }

            // copy IEnumerable System.Collections.Generic.List<Robot> TheirRobots
            if (this.TheirRobots != null)
            {
                target.TheirRobots = new System.Collections.Generic.List<Robot>();
                foreach(Robot elem in TheirRobots)
                {
                    target.TheirRobots.Add((elem == null) ? null : (Robot)((System.ICloneable)elem).Clone());
                }
            }
            target.Ball = (this.Ball == null) ? null : (Ball)((System.ICloneable)this.Ball).Clone();
            target.Source = this.Source;
        }
        public virtual object Clone()
        {
            GameObjects target = new GameObjects();


            // copy IEnumerable System.Collections.Generic.List<Robot> OurRobots
            if (this.OurRobots != null)
            {
                target.OurRobots = new System.Collections.Generic.List<Robot>();
                foreach(Robot elem in OurRobots)
                {
                    target.OurRobots.Add((elem == null) ? null : (Robot)((System.ICloneable)elem).Clone());
                }
            }

            // copy IEnumerable System.Collections.Generic.List<Robot> TheirRobots
            if (this.TheirRobots != null)
            {
                target.TheirRobots = new System.Collections.Generic.List<Robot>();
                foreach(Robot elem in TheirRobots)
                {
                    target.TheirRobots.Add((elem == null) ? null : (Robot)((System.ICloneable)elem).Clone());
                }
            }
            target.Ball = (this.Ball == null) ? null : (Ball)((System.ICloneable)this.Ball).Clone();
            target.Source = this.Source;
            return target;

        }
    }
    /// <summary>
    /// Robot
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("Robot", Namespace="http://schemas.tempuri.org/2007/02/VisionService.html")]
    public class Robot : System.ICloneable
    {
        private Int32 _team;
        private Int32 _id;
        private Double _x;
        private Double _y;
        private Single _orientation;
        /// <summary>
        /// Team
        /// </summary>
        [DataMember()]
        public Int32 Team
        {
            get
            {
                return this._team;
            }
            set
            {
                this._team = value;
            }
        }
        /// <summary>
        /// Id
        /// </summary>
        [DataMember()]
        public Int32 Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Double X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Double Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        /// <summary>
        /// Orientation
        /// </summary>
        [DataMember()]
        public Single Orientation
        {
            get
            {
                return this._orientation;
            }
            set
            {
                this._orientation = value;
            }
        }
        public void CopyTo(Robot target)
        {
            target.Team = this.Team;
            target.Id = this.Id;
            target.X = this.X;
            target.Y = this.Y;
            target.Orientation = this.Orientation;
        }
        public virtual object Clone()
        {
            Robot target = new Robot();

            target.Team = this.Team;
            target.Id = this.Id;
            target.X = this.X;
            target.Y = this.Y;
            target.Orientation = this.Orientation;
            return target;

        }
    }
    /// <summary>
    /// Ball
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("Ball", Namespace="http://schemas.tempuri.org/2007/02/VisionService.html")]
    public class Ball : System.ICloneable
    {
        private Double _x;
        private Double _y;
        private Int32 _imageX;
        private Int32 _imageY;
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Double X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Double Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        /// <summary>
        /// ImageX
        /// </summary>
        [DataMember()]
        public Int32 ImageX
        {
            get
            {
                return this._imageX;
            }
            set
            {
                this._imageX = value;
            }
        }
        /// <summary>
        /// ImageY
        /// </summary>
        [DataMember()]
        public Int32 ImageY
        {
            get
            {
                return this._imageY;
            }
            set
            {
                this._imageY = value;
            }
        }
        public void CopyTo(Ball target)
        {
            target.X = this.X;
            target.Y = this.Y;
            target.ImageX = this.ImageX;
            target.ImageY = this.ImageY;
        }
        public virtual object Clone()
        {
            Ball target = new Ball();

            target.X = this.X;
            target.Y = this.Y;
            target.ImageX = this.ImageX;
            target.ImageY = this.ImageY;
            return target;

        }
    }
    /// <summary>
    /// Vision Service Operations
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class VisionServiceOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Replace, Subscribe, ReliableSubscribe, DeleteSubscription, GameObjInfoReady>
    {
        // Post DsspDefaultLookup and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultLookup and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultDrop and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DsspDefaultDrop and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Get and return the response port.
        public virtual PortSet<VisionServiceState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Get and return the response port.
        public virtual PortSet<VisionServiceState,Fault> Get()
        {
            Get op = new Get();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Replace and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> Replace(VisionServiceState body)
        {
            Replace op = new Replace();
            op.Body = body ?? new VisionServiceState();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Subscribe and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        // Post Subscribe and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        // Post ReliableSubscribe and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> ReliableSubscribe(Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, IPort notificationPort)
        {
            ReliableSubscribe op = new ReliableSubscribe();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        // Post ReliableSubscribe and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> ReliableSubscribe(IPort notificationPort)
        {
            ReliableSubscribe op = new ReliableSubscribe();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        // Post DeleteSubscription and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> DeleteSubscription(DeleteSubscriptionType body)
        {
            DeleteSubscription op = new DeleteSubscription();
            op.Body = body ?? new DeleteSubscriptionType();
            this.Post(op);
            return op.ResponsePort;

        }
        // Post GameObjInfoReady and return the response port.
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,Fault> GameObjInfoReady(GameObjects body)
        {
            GameObjInfoReady op = new GameObjInfoReady();
            op.Body = body ?? new GameObjects();
            this.Post(op);
            return op.ResponsePort;

        }
    }
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<VisionServiceState, Fault>>
    {
        public Get()
        {
        }
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<VisionServiceState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Replace
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : Microsoft.Dss.ServiceModel.Dssp.Replace<VisionServiceState, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, Fault>>
    {
        public Replace()
        {
        }
        public Replace(VisionServiceState body) : 
                base(body)
        {
        }
        public Replace(VisionServiceState body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Subscribe
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : Microsoft.Dss.ServiceModel.Dssp.Subscribe<Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, Fault>>
    {
        public Subscribe()
        {
        }
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body)
        {
        }
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Reliable Subscribe
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class ReliableSubscribe : Microsoft.Dss.ServiceModel.Dssp.Subscribe<Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType, PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, Fault>>
    {
        public ReliableSubscribe()
        {
        }
        public ReliableSubscribe(Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body) : 
                base(body)
        {
        }
        public ReliableSubscribe(Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Delete Subscription
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class DeleteSubscription : Microsoft.Dss.ServiceModel.Dssp.Update<DeleteSubscriptionType, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, Fault>>
    {
        public DeleteSubscription()
        {
        }
        public DeleteSubscription(DeleteSubscriptionType body) : 
                base(body)
        {
        }
        public DeleteSubscription(DeleteSubscriptionType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    /// <summary>
    /// Game Obj Info Ready
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class GameObjInfoReady : Microsoft.Dss.ServiceModel.Dssp.Update<GameObjects, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, Fault>>
    {
        public GameObjInfoReady()
        {
        }
        public GameObjInfoReady(GameObjects body) : 
                base(body)
        {
        }
        public GameObjInfoReady(GameObjects body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
